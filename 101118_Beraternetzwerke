# Edge- und Nodelist koppeln

# Gesamtnetzwerk dfb 

# IGRAPH-OBJEKT

library(igraph)
# liest die Dateien direkt aus dem github-Verzeichnis ein
el <- read.csv("https://raw.githubusercontent.com/hdm-rz015/DFB_Netzwerk/master/101118_Edgelist_erweitert.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/hdm-rz015/DFB_Netzwerk/master/101118_Nodelist_erweitert.csv", header=T, as.is=T, sep = ",")

# prüft, ob alle Variablen eingelesen wurden
head(el)
head(nodes)

# wandelt die edgelist in eine Matrix um und baut das igraph-Objekt
hties <-as.matrix(el)
dfb <- graph_from_data_frame(d=hties, vertices=nodes, directed=F)
dfb
plot(dfb)

# ---------------------------------------------------------
# GESAMTNETZWERK

# DIE BEZEICHNUNG DER AKTEURE anpassen 
V(dfb)$label <- V(dfb)$akteursbezeichnung

# EINFÄRBEN AUFGRUND VON VERTEXT ATTRIBUTEN

# Im Netzwerk sind Spieler, Engagement, Werbekooperationen und Berater abgelegt, die über das Vertex.Attribut $type mit "1" (Spieler) oder "2" (Werbekooperationen) oder "3" (soziales Engagement) oder "4" (Berater) kodiert sind.
vertex.attributes(dfb)$type

# Alle Akteure sollen nun in verschiedenen Farben visualisiert werden

#FARBEN nach Vertex-Attributen definieren
faerbung <- c("chartreuse2", "honeydew3", "springgreen4", "gold")

#definiert das Farbspektrum, der verwendeten Farben und legt diese in einem neuen Vector faerbung fest. Da wir wissen, dass wir bei $Type vier Werte haben (Spieler, Werbekooperationen, soziales Engagement, Berater) brauchen wir auch drei Werte. Die direkten Farbpaletten sind hier hinterlegt: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf.

V(dfb)$color <- faerbung[V(dfb)$type]
# weist dem Vertex-Attribut color die Funktion faerbung zu, die wir vorher mit vier Farben definiert haben.

plot(dfb)



# FORM DER AKTEURE ANPASSEN

# definiert, dass alle Knoten als square auftreten
V(dfb)$shape = "square"

plot(dfb)

# wählt alle Knoten aus, die das Vertex-Attribut "1" bei type gesetzt haben
spieler <- V(dfb)[type == "1"]

spieler

# weist allen Werten von spieler den Shape "cirle" zu
V(dfb)[spieler]$shape = "circle"


plot(dfb)


# DAS NETZWERK WIRD ENTZERRT MIT DER VARIABLE

coords <- layout_with_kk(dfb)*1.8


# RELATIVE WERTE DURCH DIE GRÖßEN DER KNOTEN ABBILDEN

# berechnet den Degree-Wert für alle Knoten und weist ihm die Variable "knotengroesse" zu
knotengroesse <- degree(dfb)
knotengroesse

# plottet da Netzwerk und ändert die Größe des Knotens nach dem Degree-Wert
par(mfrow=c(1,1)) 

# VERTEX-ATTRIBUTE, die immer für das GESAMTE NETZWERK gelten

# bestimmt die farbliche Umrandung der Knoten
vertex.attributes(dfb)$frame.color
V(dfb)$frame.color = "black"

# legt die Schrift der Knotenbezeichnungen fest 
vertex.attributes(dfb)$label.family
V(dfb)$label.family = "Helvetica"

# legt die Schriftfarbe der Knotenbezeichnungen fest
vertex.attributes(dfb)$label.color
V(dfb)$label.color = "grey25"


# EDGE-ATTRIBUTE, die immer für das GESAMTE NETZWERK gelten

# legt die Kantenfarbe fest
edge.attributes(dfb)$edge.color
V(dfb)$edge.color = "grey80"



plot(dfb, 
     vertex.size=knotengroesse*5.5, # führt die relative Größe der Knoten aus
     layout=coords, # entzerrt das Netzwerk
     rescale=FALSE, ylim=c(-7,10),xlim=c(-13,13), asp = 0, # legt die Fenstergröße fest nach x- und y-Varianten
     edge.curved=.2, # bestimmt den Krümmungsgrad der Kanten
     edge.width=E(dfb)$weight, #legt die Kantenstärke fest
     main="Gesamtnetzwerk DFB"
)


#------------------------------------------------

# BERATERNETZWERKE

#Zuordnung der Vertex-Attribute
name <- V(dfb)$akteursbezeichnung
follower <- V(dfb)$follower
marktwert <- V(dfb)$marktwert
alter <- V(dfb)$alter
berater <- V(dfb)$berater
nationalitaet <- V(dfb)$nationalitaet
type <- V(dfb)$type
ausstatter <- V(dfb)$ausstatter

name 
marktwert
follower
alter
berater
nationalitaet
type
ausstatter




#SELEKTION NACH BERATER
# Um das Netzwerk mit den Beratern darzustellen, nutzen wir ein erweitertes Gesamtnetzwerk. Hier sind die Berater kein Vertex-Attribut sondern auch ein Akteur (die gelben Knoten im Netzwerk). Um zu sehen mit welchen Werbepartnern oder Sozialen Einrichtungen die Spieler eines bestimmten Beraters kooperieren, erstellt man ein Ego-Netzwerk des Beraters. Dabei legt man fest, das die order=2 ist.

#BERATER 1: Family and Football
berater1 <- make_ego_graph(dfb, order = 2, nodes = V(dfb)$name == "Family_and_Football", mode = "all")
berater1
plot(berater1[[1]], main ="Spieler mit Berater 'Family and Football'")

# aufällig ist: Beide Spieler haben den Ausrüster Adidas; beide Spieler haben viel soziales Engagement und ca. gleich viele Werbekooperationen

# BERATER 2: SportsTotal
berater2 <- make_ego_graph(dfb, order = 2, nodes = V(dfb)$name == "SportsTotal_Berater", mode = "all")
berater2
plot(berater2[[1]], main ="Spieler mit Berater 'SportsTotal'",
     edge.curved=.2)

# auffällig ist: Beide Spieler haben generell viele Kanten dh sowohl viele Werbekooperationen als auch mehrer soziale Beziehungen, die Spieler haben unterschiedliche Ausrüster

# BERATER 3: fair_sport GmbH
berater3 <- make_ego_graph(dfb, order = 2, nodes = V(dfb)$name == "fair_sport GmbH", mode = "all")
berater3
plot(berater3[[1]], main ="Spieler mit Berater 'fair_sport GmbH'",
     edge.curved=.2)

# auffällig ist: Beide Spieler haben denselben Ausrüster, einer des Spieler hat keine soziale Beziehung, beide Spieler haben wenige Werbekooperationen

# BERATER 4:  Karlheinz Foerster
berater4 <- make_ego_graph(dfb, order = 2, nodes = V(dfb)$name == "Karlheinz_Foerster", mode = "all")
berater4
plot(berater4[[1]], main ="Spieler mit Berater 'Karlheinz Foerster'",
     edge.curved=.2)

# auffällig ist: Beide Spieler haben nur einen Ausrüster, aber keine sonstigen Werbekooperationen
# Abgleich mit dem Marktwert gibt sicherlich weitere Aufschlüsse
