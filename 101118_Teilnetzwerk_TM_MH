# GESAMTNETZWERK DFB

# IGRAPH-OBJEKT

library(igraph)
el <- read.csv("https://raw.githubusercontent.com/hdm-rz015/DFB_Netzwerk/master/101118_Edgelist_einfach.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/hdm-rz015/DFB_Netzwerk/master/271018_Nodelist.csv", header=T, as.is=T, sep = ",")


head(el)
head(nodes)

hties <-as.matrix(el)
dfb <- graph_from_data_frame(d=hties, vertices=nodes, directed=F)
dfb
plot(dfb)


# ---------------------------------------------------------

# VISUALISIERUNG DES GESAMTNETZWERKS DFB

# Die Beschriftung der Knoten (Label) entspricht dem Attribut "Akteursbezeichnungen".
V(dfb)$label <- V(dfb)$akteursbezeichnung

# Im Netzwerk werden die Spieler selbst, ihre Werbekooperationen und ihr soziales Engagement dargestellt.
# Das Vertex-Attribut $type definiert mit "1" die Spieler, mit "2" die Werbekooperationen und mit "3" das soziale Engagement.
vertex.attributes(dfb)$type

# Färbung der Knoten
# Die Akteure werden abhängig von dem Attribut $type verschieden eingefärbt.
# Das Farbspektrum wird definiert und mit dem neuen Vector faerbung festgelegt.
# Da das Attribut $type nur drei Werte hat (Spieler, Werbekooperationen, soziales Engagement), werden drei unterschiedliche Farben benötigt.
faerbung <- c("chartreuse2", "honeydew3", "springgreen4")

# Das Vertex-Attribut color wird definiert und die Funktion "faerbung" ihm zugewiesen.
V(dfb)$color <- faerbung[V(dfb)$type]

# Form der Akteure bestimmen
# definiert, dass alle Knoten als square auftreten.
V(dfb)$shape = "square"

# wählt alle Knoten aus, die das Vertex-Attribut "1" bei $type gesetzt haben.
spieler <- V(dfb)[type == "1"]
spieler

# weist allen Werten von "spieler" den shape "cirle" zu.
V(dfb)[spieler]$shape = "circle"

plot(dfb)




# Das Netzwerk wird mit der Variable coords entzerrt und mit dem Fruchterman-Rheingold Algorithmus visualisiert.
coords <- layout_with_fr(dfb)*1.2

# Festlegung der relativen Knotengröße
# berechnet die Degree-Werte für alle Knoten und weist diese der Variable "knotengroesse" zu.
knotengroesse <- degree(dfb)
knotengroesse

# bestimmt die farbliche Umrandung der Knoten
vertex.attributes(dfb)$frame.color
V(dfb)$frame.color = "gray45"

# legt die Schrift der Knotenbezeichnungen fest 
vertex.attributes(dfb)$label.family
V(dfb)$label.family = "Helvetica"

# legt die Schriftfarbe der Knotenbezeichnungen fest
vertex.attributes(dfb)$label.color
V(dfb)$label.color = "gray20"

# legt die Kantenfarbe fest
edge.attributes(dfb)$edge.color
E(dfb)$color = "gray30"

# ---------------------------------------------------------


plot(dfb, 
     vertex.size=knotengroesse*5.5, # führt die relative Größe der Knoten aus
     layout=coords, # entzerrt das Netzwerk
     rescale=FALSE, ylim=c(-10,15),xlim=c(-15,25), asp = 0, # legt die Fenstergröße fest 
     edge.curved=0.2, # bestimmt den Krümmungsgrad der Kanten
     edge.width=E(dfb)$weight, # legt die Kantenstärke fest
     main="Gesamtnetzwerk DFB" # Überschrift des Netzwerks
)

# ---------------------------------------------------------

# EGO-NETZWERKE

# Welche zwei Spieler sind am stärksten im Netzwerk vernetzt?
# Der allgemeine Degree-Wert wird berechnet.

degree(dfb)

# Thomas Müller ist der Spieler, der am stärksten im Netzwerk vernetzt ist. Wie aus der Liste abzulesen, hat er 15 degrees. 
# Mats Hummels ist der Spieler, der am zweitstärksten im Netzwerk vernetzt ist. Wie aus der Liste abzulesen, hat er 11 degrees. 
# Erstellung der Ego-Netzwerke von Thomas Müller und Mats Hummels. 

# ---------------------------------------------------------

# THOMAS MÜLLER

ego(dfb, order = 1, nodes = V(dfb)$akteursbezeichnung == "Thomas Mueller", mode = "all")
#selektiert das Ego-Netzwerk von Thomas Mueller.

TM <- make_ego_graph(dfb, order = 1, nodes = V(dfb)$akteursbezeichnung == "Thomas Mueller", mode = "all")
TM

plot(TM[[1]], 
     main="Ego-Netzwerk Thomas Mueller",
     edge.curved=.2, # bestimmt den Krümmungsgrad der Kanten
     edge.width=E(dfb)$weight, #legt die Kantenstärke fest
)


#----------------------------------------------------------------------

# MATS HUMMELS

ego(dfb, order = 1, nodes = V(dfb)$akteursbezeichnung == "Mats Hummels", mode = "all")
#selektiert das Ego-Netzwerk von Mats Hummels. 

MH <- make_ego_graph(dfb, order = 1, nodes = V(dfb)$akteursbezeichnung == "Mats Hummels", mode = "all")
MH

plot(MH[[1]], 
     main="Ego-Netzwerk Mats Hummels",
     edge.curved=.2, # bestimmt den Krümmungsgrad der Kanten
     edge.width=E(dfb)$weight, #legt die Kantenstärke fest
)


#---------------------------------------------------------------------------

# DIREKTER VERGLEICH DER EGO-NETZWERKE TM UND MH

par(mfrow=c(1,2), mar=c(2,2,4,2))

plot(TM[[1]], 
     layout = layout_with_fr, 
     main="Ego-Netzwerk Thomas Mueller",
     edge.curved=.2,
     edge.width=E(dfb)$weight,
)

plot(MH[[1]], 
     layout = layout_with_fr, 
     main="Ego-Netzwerk Mats Hummels",
     edge.curved=.2,
     edge.width=E(dfb)$weight,
)
