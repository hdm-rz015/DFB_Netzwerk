# GESAMTNETZWERK dfb_erw 

# IGRAPH-OBJEKT

library(igraph)
el <- read.csv("https://raw.githubusercontent.com/hdm-rz015/DFB_Netzwerk/master/101118_Edgelist_erweitert.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/hdm-rz015/DFB_Netzwerk/master/101118_Nodelist_erweitert.csv", header=T, as.is=T, sep = ",")

head(el)
head(nodes)

hties <-as.matrix(el)
dfb_erw <- graph_from_data_frame(d=hties, vertices=nodes, directed=F)
dfb_erw
plot(dfb_erw)

# ---------------------------------------------------------
# GESAMTNETZWERK

# Die Beschriftung der Knoten (Label) entspricht dem Attribut "Akteursbezeichnungen". 
V(dfb_erw)$label <- V(dfb_erw)$akteursbezeichnung

#VISUALISIERUNG DES GESAMTNETZWERKS

# Im Netzwerk werden die Spieler selbst, ihre Werbekooperationen und ihr soziales Engagement dargestellt.
# Das Vertex-Attribut $type definiert mit "1" die Spieler, mit "2" die Werbekooperationen und mit "3" das soziale Engagement.
vertex.attributes(dfb_erw)$type


# Färbung der Knoten
# Die Akteure werden abhängig von dem Attribut $type verschieden eingefärbt.
# Das Farbspektrum wird definiert und mit dem neuen Vector faerbung festgelegt.
# Da das Attribut $type nur drei Werte hat (Spieler, Werbekooperationen, soziales Engagement), werden drei unterschiedliche Farben benötigt.
faerbung <- c("chartreuse2", "honeydew3", "springgreen4", "gold")

# Das Vertex-Attribut color wird definiert und die Funktion "faerbung" ihm zugewiesen.
V(dfb_erw)$color <- faerbung[V(dfb_erw)$type]

# Form der Akteure anpassen
# definiert, dass alle Knoten als square auftreten.
V(dfb_erw)$shape = "square"

# wählt alle Knoten aus, die das Vertex-Attribut "1" bei type gesetzt haben.
spieler <- V(dfb_erw)[type == "1"]
spieler

# weist allen Werten von spieler den Shape "cirle" zu.
V(dfb_erw)[spieler]$shape = "circle"

plot(dfb_erw)

# Das Netzwerk wird mit der Variable coords entzerrt und mit dem Fruchterman-Rheingold Algorithmus visualisiert.
coords <- layout_with_fr(dfb_erw)*1.8


# Festlegung der relativen Knotengröße
# berechnet den Degree-Wert für alle Knoten und weist ihm die Variable "knotengroesse" zu.
knotengroesse <- degree(dfb_erw)
knotengroesse

# bestimmt die farbliche Umrandung der Knoten
vertex.attributes(dfb_erw)$frame.color
V(dfb_erw)$frame.color = "gray45"

# legt die Schrift der Knotenbezeichnungen fest 
vertex.attributes(dfb_erw)$label.family
V(dfb_erw)$label.family = "Helvetica"

# legt die Schriftfarbe der Knotenbezeichnungen fest
vertex.attributes(dfb_erw)$label.color
V(dfb_erw)$label.color = "gray20"

# legt die Kantenfarbe fest
edge.attributes(dfb_erw)$edge.color
E(dfb_erw)$color = "gray30"

# ---------------------------------------------------------

plot(dfb_erw, 
     vertex.size=knotengroesse*15, # führt die relative Größe der Knoten aus
     layout=coords, # entzerrt das Netzwerk
     rescale=FALSE, ylim=c(-15,25),xlim=c(-22,27), asp = 0, # legt die Fenstergröße fest nach x- und y-Varianten
     edge.curved=.2, # bestimmt den Krümmungsgrad der Kanten
     edge.width=E(dfb_erw)$weight, #legt die Kantenstärke fest
     main="erweitertes Gesamtnetzwerk des DFB mit Beratern"
)

#------------------------------------------------

# BERATER-TEILNETZWERKE ERSTELLEN

#Zuordnung der Vertex-Attribute
name <- V(dfb_erw)$akteursbezeichnung
follower <- V(dfb_erw)$follower
marktwert <- V(dfb_erw)$marktwert
alter <- V(dfb_erw)$alter
berater <- V(dfb_erw)$berater
nationalitaet <- V(dfb_erw)$nationalitaet
type <- V(dfb_erw)$type
ausstatter <- V(dfb_erw)$ausstatter

name 
marktwert
follower
alter
berater
nationalitaet
type
ausstatter


#Selektion nach den einzelnen Beratern
# Um die Teilnetzwerke der Berater zu visualisieren, werden verschiedene Ego-Netzwerke erstellt. 
# Durch den Befehl order=2 sieht man nicht nur die jeweiligen Spieler des Beraters sondern auch die Werbekooperationen und das soziale Engagement der Spieler.

#BERATER 1: Family and Football
berater1 <- make_ego_graph(dfb_erw, order = 2, nodes = V(dfb_erw)$name == "Family_and_Football", mode = "all")
berater1
plot(berater1[[1]],
     main ="Spieler mit Berater 'Family and Football'")
# Es fällt auf, dass es viele Parallelen bei den beiden Spielern gibt. Beide haben den Ausrüster Adidas und beide haben verhältnismäßig gleich viele Werbekooperationen wie soziales Engagement.


# BERATER 2: SportsTotal
berater2 <- make_ego_graph(dfb_erw, order = 2, nodes = V(dfb_erw)$name == "SportsTotal_Berater", mode = "all")
berater2
plot(berater2[[1]],
     main ="Spieler mit Berater 'SportsTotal'")
# Es fällt auf, dass beide Spieler generell überdurchschnittlich viele Kanten haben, sowohl Werbekooperationen als auch soziales Engagement.

# BERATER 3: fair_sport GmbH
berater3 <- make_ego_graph(dfb_erw, order = 2, nodes = V(dfb_erw)$name == "fair_sport GmbH", mode = "all")
berater3
plot(berater3[[1]], 
     main ="Spieler mit Berater 'fair-sport GmbH'")
# Es fällt auf, dass beide Spieler denselben Ausrüster haben.
# Es fällt auf, dass einer der Spieler kein soziales Engagement zeigt und beide Spieler auch nur wenige Werbekooperationen haben.

# BERATER 4:  Karlheinz Foerster
berater4 <- make_ego_graph(dfb_erw, order = 2, nodes = V(dfb_erw)$name == "Karlheinz_Foerster", mode = "all")
berater4
plot(berater4[[1]],
     main ="Spieler mit Berater 'Karlheinz Foerster'")
# Es fällt auf, dass beide Spieler nur einen Ausrüster haben, aber keine sonstigen Werbekooperationen.
